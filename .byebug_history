exit
c
@set.sample
exit
row
exit
c
matched_colors
row
exit
count
el
arr
exit
row
@board.board[idx]
guessed_row.count[k]
guessed_row.count[k].nil?
num.nil?
exit
matched_colors
color_count
s
num
k
exit
v
k
exit
row
matched_colors
color_count
exit
matched_colors
color_count
exit
@board.board[idx]
exit
@board.board[idx]
s
idx
exit
idx
exit
guess
@guess
n
@set.length
@set.each
s
n
@starter
@seeding_phase
exit
@set
@set.length
@set.include?(@starter)
@starter
exit
xit
@starter
exit
el
n
el
c
el
exit
guess
row
exit
el
s
n
row
exit
el
s
n
row
exit
row
@set
set_print
@set.length
@set
row
c
@board.code.secret
@code.secret
set_print
@board.print
@board.board
c
s
set_print
@set
exit
@set.length
exit
row.holes
row
c
exit
set_print
@set.length
exit
c
set_print
set_role
@set
c
display @set.length
c
@set.length
exit
@set.length
@set
exit
@set.length
exit
@set[1]
c
@set[0]
c
correct_positions != matched_positions
@set[0]
@set[0[
@set
exit
el
s
el
n
match_positions
correct_positions
n
row
c
exit
@set
c
n
s
@set.length
@set
c
output
exit
c
@set[0]
row.holes
matched_positions
correct_positions
exit
matched_positions
correct_positions
row.holes
el.combo
exit
@set
@set.sample
c
exit
set_print
el
row
exit
row
idx
color
el
color
exit
el
exit
row
exit
row.holes
row
exit
row
exit
row
exit
@board.board
exit
set_print
print_set
@set
@set.length
@set.lenght
exit
set_print
@set.length
exit
set_print
@set
@set.length
exit
value
@color_count[key]
el.count[key]
el.count[k]
value
key
exit
idx
el
v
k
exit
set_print
@set.length
exit
@color_count[k]
el.count[k]
v
k
exit
@color_count[k]
@color_count
v
k
exit
@color_count
v
k
@set.length
exit
v
el.count[k]
k
el
exit
@set.length
exit
@set.length
exit
set_print
@set_print
@set
@set.length
exit
@set
set_print
@set.length
exit
@set.length
@set
exit
@color_count
el.count[color]
el
@set
@set.length
